import { Component, ElementRef, EventEmitter, ContentChildren, Host, HostBinding, Inject, Input, Optional, Output } from '@angular/core';
import { RTL } from '@progress/kendo-angular-l10n';
import { SplitterPaneComponent } from './splitter-pane.component';
import { SplitterService } from './splitter.service';
/**
 * Represents the Kendo UI Splitter component for Angular.
 *
 * ```ts-preview
 *
 *  @Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-splitter style="height: 280px;">
 *
 *          <kendo-splitter-pane [collapsible]="true" size="30%">
 *            <h3>Inner splitter / left pane</h3>
 *            <p>Resizable and collapsible.</p>
 *          </kendo-splitter-pane>
 *
 *          <kendo-splitter-pane>
 *            <h3>Inner splitter / center pane</h3>
 *            <p>Resizable only.</p>
 *          </kendo-splitter-pane>
 *
 *          <kendo-splitter-pane [collapsible]="true" size="30%">
 *            <h3>Inner splitter / right pane</h3>
 *            <p>Resizable and collapsible.</p>
 *          </kendo-splitter-pane>
 *
 *        </kendo-splitter>
 *      `,
 *    styles: [ `
 *        h3 { font-size: 1.2em; }
 *        h3, p { margin: 10px; padding: 0; }
 *    ` ]
 *  })
 *  class AppComponent {}
 * ```
 */
export class SplitterComponent {
    constructor(element, splitterService, rtl, enclosingPane) {
        this.element = element;
        this.splitterService = splitterService;
        /**
         * Specifies the orientation of the panes within the Splitter.
         * Panes in a horizontal Splitter are placed horizontally.
         * Panes in a vertical Splitter are placed vertically.
         */
        this.orientation = 'horizontal';
        /**
         * Fires after a Splitter pane is resized or collapsed.
         * Useful for triggering layout calculations on components
         * which are positioned inside the panes.
         */
        this.layoutChange = new EventEmitter();
        this.ariaRole = 'splitter';
        if (enclosingPane) {
            enclosingPane.containsSplitter = true;
        }
        this.splitterService.layoutChange.subscribe(e => this.layoutChange.emit(e));
        this.direction = rtl ? 'rtl' : 'ltr';
    }
    get hostClasses() {
        return true;
    }
    get horizontalHostClasses() {
        return this.orientation === 'horizontal';
    }
    get verticalHostClasses() {
        return this.orientation === 'vertical';
    }
    get dir() {
        return this.direction;
    }
    ngAfterContentInit() {
        const reconfigure = () => {
            this.splitterService.configure({
                panes: this.panes.toArray(),
                orientation: this.orientation,
                containerSize: () => {
                    if (this.orientation === 'vertical') {
                        return this.element.nativeElement.offsetHeight;
                    }
                    else {
                        return this.element.nativeElement.offsetWidth;
                    }
                }
            });
        };
        reconfigure();
        this.panes.changes.subscribe(reconfigure);
    }
}
SplitterComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoSplitter',
                selector: 'kendo-splitter',
                providers: [SplitterService],
                template: `
      <ng-content select="kendo-splitter-pane"></ng-content>
      <ng-container *ngFor="
        let pane of panes;
        let index = index;
        let last = last;
      ">
        <kendo-splitter-bar
          kendoLayoutDraggable
          *ngIf="!last"
          [index]="index"
          [orientation]="orientation">
        </kendo-splitter-bar>
      </ng-container>
    `
            },] },
];
/** @nocollapse */
SplitterComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: SplitterService, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] },] },
    { type: SplitterPaneComponent, decorators: [{ type: Optional }, { type: Host }, { type: Inject, args: [SplitterPaneComponent,] },] },
];
SplitterComponent.propDecorators = {
    'orientation': [{ type: Input },],
    'layoutChange': [{ type: Output },],
    'hostClasses': [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-splitter',] }, { type: HostBinding, args: ['class.k-splitter-flex',] },],
    'horizontalHostClasses': [{ type: HostBinding, args: ['class.k-splitter-horizontal',] },],
    'verticalHostClasses': [{ type: HostBinding, args: ['class.k-splitter-vertical',] },],
    'dir': [{ type: HostBinding, args: ['attr.dir',] },],
    'ariaRole': [{ type: HostBinding, args: ['attr.role',] },],
    'panes': [{ type: ContentChildren, args: [SplitterPaneComponent,] },],
};
